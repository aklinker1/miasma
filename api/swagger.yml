---
swagger: '2.0'
info:
  version: 0.0.0
  title: Miasma

consumes:
  - application/json
produces:
  - application/json

paths:
  /api/health:
    get:
      summary: Standard health check endpoint that checks all the service's statuses
      operationId: getHealthCheck
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/Health'
  /api/apps:
    get:
      summary: List all the running apps
      operationId: getApps
      parameters:
        - in: query
          name: hidden
          required: false
          type: boolean
          description: Whether or not to show hidden apps
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/App'
        default:
          $ref: '#/responses/unknown'
    post:
      summary: Create and start a new app
      operationId: createApp
      parameters:
        - in: body
          name: app
          schema:
            $ref: '#/definitions/AppInput'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/App'
        400:
          description: Bad Request
          schema:
            type: string
        default:
          $ref: '#/responses/unknown'
  /api/apps/{appName}:
    get:
      summary: Get an app by name
      operationId: getApp
      parameters:
        - $ref: '#/parameters/appName'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/App'
        404:
          description: Not Found
          schema:
            type: string
    delete:
      summary: Stop and delete an app
      operationId: deleteApp
      parameters:
        - $ref: '#/parameters/appName'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/App'
        404:
          description: Not Found
          schema:
            type: string
        default:
          $ref: '#/responses/unknown'
  /api/apps/{appName}/start:
    post:
      summary: start the app
      operationId: startApp
      parameters:
        - $ref: '#/parameters/appName'
      responses:
        200:
          description: Started
        404:
          description: Not Found
          schema:
            type: string
        default:
          $ref: '#/responses/unknown'
  /api/apps/{appName}/stop:
    post:
      summary: stop the app
      operationId: stopApp
      parameters:
        - $ref: '#/parameters/appName'
      responses:
        200:
          description: Stopped
        404:
          description: Not Found
          schema:
            type: string
        default:
          $ref: '#/responses/unknown'
  /api/apps/{appName}/config:
    get:
      summary: get an app's current config
      operationId: getAppConfig
      parameters:
        - $ref: '#/parameters/appName'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/AppConfig'
        404:
          description: Not Found
          schema:
            type: string
        default:
          $ref: '#/responses/unknown'
    put:
      summary: update an app's config
      operationId: updateAppConfig
      parameters:
        - $ref: '#/parameters/appName'
        - in: body
          name: newAppConfig
          schema:
            $ref: '#/definitions/AppConfig'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/AppConfig'
        400:
          description: Bad Request
          schema:
            type: string
        404:
          description: Not Found
          schema:
            type: string
        default:
          $ref: '#/responses/unknown'
  /api/apps/{appName}/env:
    get:
      summary: get an app's environment variables
      operationId: getAppEnv
      parameters:
        - $ref: '#/parameters/appName'
      responses:
        200:
          description: OK
          schema:
            type: object
        404:
          description: Not Found
          schema:
            type: string
        default:
          $ref: '#/responses/unknown'
    put:
      summary: update an app's env
      operationId: updateAppEnv
      parameters:
        - $ref: '#/parameters/appName'
        - in: body
          name: newEnv
          schema:
            type: object
            additionalProperties: {}
            example:
              KEY: value
              SOME_BOOLEAN: false
      responses:
        200:
          description: OK
          schema:
            type: object
        400:
          description: Bad Request
          schema:
            type: string
        404:
          description: Not Found
          schema:
            type: string
        default:
          $ref: '#/responses/unknown'
  /api/apps/{appName}/update:
    put:
      summary: pull the app's image and restart it
      operationId: updateApp
      parameters:
        - $ref: '#/parameters/appName'
        - in: query
          name: newImage
          required: false
          type: string
          description: A new image to base the app off of
      responses:
        200:
          description: OK
          schema:
            type: object
        400:
          description: Bad Request
          schema:
            type: string
        404:
          description: Not Found
          schema:
            type: string
        default:
          $ref: '#/responses/unknown'
  /api/plugins:
    get:
      summary: List all available plugins and if they are installed
      operationId: listPlugins
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Plugin'
        default:
          $ref: '#/responses/unknown'
  /api/plugins/{pluginName}:
    get:
      summary: Get a plugin
      operationId: getPlugin
      parameters:
        - $ref: '#/parameters/pluginName'
      responses:
        200:
          description: Created
          schema:
            $ref: '#/definitions/Plugin'
        404:
          description: Not Found
          schema:
            type: string
        default:
          $ref: '#/responses/unknown'
    post:
      summary: Install (and start) a plugin
      operationId: installPlugin
      parameters:
        - $ref: '#/parameters/pluginName'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Plugin'
        default:
          $ref: '#/responses/unknown'
    delete:
      summary: Stop and uninstall a plugin
      operationId: uninstallPlugin
      parameters:
        - $ref: '#/parameters/pluginName'
      responses:
        200:
          description: Created
          schema:
            $ref: '#/definitions/Plugin'
        default:
          $ref: '#/responses/unknown'

parameters:
  appName:
    name: appName
    in: path
    required: true
    type: string
    description: App name from the `-a|--app` flag
  pluginName:
    name: pluginName
    in: path
    required: true
    type: string
responses:
  unknown:
    description: Unknown Error
    schema:
      type: string

definitions:
  Health:
    type: object
    properties:
      version:
        type: string
        description: Miasma's current version
      dockerVersion:
        type: string
        description: The version of docker running on the host, or null if docker is not running
      swarm:
        type: object
        description: 
          The info about the docker swarm if the host running miasma is apart of
          one. If it is not apart of a swarm, it returns `null`
        properties:
          id:
            type: string
            description: The swarm's ID
          joinCommand:
            type: string
            description: The command for a node to run to join the swarm
          createdAt:
            type: string
            description: UTC timestamps when the swarm was created
          updatedAt:
            type: string
            description: UTC timestamps when the swarm was last updated
    required:
      - version
      - dockerVersion
      - swarm
  App:
    type: object
    properties:
      name:
        type: string
        description: The apps name, used in the CLI with the `-a|--app` flag
      image:
        type: string
        description: The image the app is based off of
      hidden:
        type: boolean
        description: Whether or not the app is hidden during regular requests
      running:
        type: boolean
    required:
      - name
      - image
      - running
  AppInput:
    type: object
    properties:
      name:
        type: string
        description: The apps name, used in the CLI with the `-a|--app` flag
      image:
        type: string
        description: The image the app is based off of
      hidden:
        type: boolean
        description: Whether or not the app is hidden during regular requests
    required:
      - name
      - image
  AppConfig:
    type: object
    properties:
      image:
        description: The docker image the app runs
        type: string
      hidden:
        description: Whether or not the app shows up by default when listing the apps
        type: boolean
      targetPorts:
        description: 
          The ports that the app is listening to inside the container. If no target ports
          are specified, then the container should respect the `PORT` env var.
        type: array
        items:
          type: integer
        uniqueItems: true
      publishedPorts:
        description: 
          The ports that you access the app through in the swarm. This field can, and should
          be left empty. Miasma automatically manages assigning published ports between 3001-4999.
          If you need to specify a port, make sure it's outside that range or the port has not been
          taken. Plugins have set ports starting with 4000, so avoid 4000-4020 if you want to add a
          plugin at a later date.
          If these ports are ever cleared, the app will continue using the same ports it was
          published to before, so that the ports don't change unnecessarily. If you removed it to
          clear a port for another app/plugin, make sure to restart the app and a new, random port
          will be allocated for the app, freeing the old port
        type: array
        items:
          type: integer
        uniqueItems: true
      placement:
        description: 
          The placement constraints specifying which nodes the app will be ran on. Any valid
          value for the
          [`--constraint` flag](https://docs.docker.com/engine/swarm/services/#placement-constraints)
          is valid item in this list
        type: array
        items:
          type: string
        uniqueItems: true
      volumes:
        description:
          volume bindings for the app
        type: array
        items:
          type: object
          properties:
            Source:
              description: The volume name or directory on the host that the data is stored in
              type: string
            Target:
              description: The path inside the container that the data is served from
              type: string
            # Type:
            #   description:
            #     The type of binding. Should be either "bind", "volume", "tmpfs", or "npipe".
            #   type: string
            #   x-nullable: true
      networks:
        description:
          A list of other apps that the service communicates with using their service name and
          docker's internal DNS. Services don't have to be two way; only the service that accesses
          the other needs the other network added
        type: array
        items:
          type: string
        uniqueItems: true
      route:
        description: 
          When the Traefik plugin is installed, the route describes where the app can be accessed
          from.
        type: object
        x-nullable: true
        properties:
          host:
            description: Describes the hostname the app is served at ("test.domain.com")
            type: string
            x-nullable: true
          path:
            description: 
              The path at a given host the app can be reached from ("/api"). It should start
              with a "/"
            type: string
            x-nullable: true
          traefikRule:
            description: 
              Instead of using `host` and/or `path`, you can specify the exact rule Traefik will use
              to route to the app. See [Traefik's documentation]() for how to use this field.
              This field takes priority over `host` and `path`
            type: string
            x-nullable: true
  Plugin:
    type: object
    properties:
      name:
        description: The plugin's name. It can be used to install a plugin
        type: string
      installed:
        description: Whether or not the plugin is installed
        type: boolean
      installCommand:
        description: Command to run to install the plugin
        type: string
        x-nullable: true
      uninstallCommand:
        description: Command to run to uninstall the plugin
        type: string
        x-nullable: true

    required:
      - name
      - installed
