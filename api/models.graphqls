"""
Contains useful information about the cluster.
"""
type ClusterInfo {
  "The Docker swarm ID"
  id: String!
  "The command to run on other machines to join the cluster"
  joinCommand: String!
  "When the cluster was initialized"
  createdAt: Time!
  "When the cluster was last updated"
  updatedAt: Time!
}

"Server health and version information"
type Health {
  "Miasma server's current version."
  version: String!
  "The version of docker running on the host, or null if docker is not running."
  dockerVersion: String!
  "The cluster versioning and information, or `null` if not apart of a cluster."
  cluster: ClusterInfo
}

"Docker volume configuration"
type BoundVolume {
  "The path inside the container that the data is served from."
  target: String!
  "The volume name or directory on the host that the data is stored in."
  source: String!
}

enum RuntimeStatus {
  RUNNING
  STOPPED
}

"Managed application"
type App {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  "The app name. Different from the docker service name, which is the name but lower case and all spaces replaced with dashes"
  name: String!
  "Whether or not the application is managed by the system. You cannot edit or delete system apps."
  system: Boolean!
  "A string used to group the app"
  group: String
  "The image and tag the application runs."
  image: String!
  """
  The currently running image digest (hash). Used internally when running
  applications instead of the tag because the when a new image is pushed, the
  tag stays the same but the digest changes.
  """
  imageDigest: String!
  """
  Whether or not the app should automatically upgrade when a newer version of it's image is available. Defaults to `true` when creating an app

  App upgrades are automatically checked according the the `AUTO_UPDATE_CRON` expression.
  """
  autoUpgrade: Boolean!
  "Whether or not the app is returned during regular requests."
  hidden: Boolean!
  "If the app has a route and the traefik plugin is enabled, this is it's config."
  route: Route
  "If the app has a route and the traefik plugin is enabled, this is a simple representation of it."
  simpleRoute: String
  """
  A list of URLs the application can be accessed at, including the `simpleRoute`, and all the published ports
  """
  availableAt(clusterIpAddress: String!): [String!]!
  "The environment variables configured for this app."
  env: Map
  "Whether or not the application is running, or stopped."
  status: RuntimeStatus!
  "The number of instances running vs what should be running."
  instances: AppInstances!
  """
  The ports that the app is listening to inside the container. If no target
  ports are specified, then the container should respect the `PORT` env var.
  """
  targetPorts: [Int!]
  """
  The ports that you access the app through in the swarm. This field can, and
  should be left empty. Miasma automatically manages assigning published ports
  between 3001-4999. If you need to specify a port, make sure it's outside that
  range or the port has not been taken. Plugins have set ports starting with
  4000, so avoid 4000-4020 if you want to add a plugin at a later date.

  If these ports are ever cleared, the app will continue using the same ports it
  was published to before, so that the ports don't change unnecessarily. If you
  removed it to clear a port for another app/plugin, make sure to restart the
  app and a new, random port will be allocated for the app, freeing the old
  port.
  """
  publishedPorts: [Int!]
  """
  The placement constraints specifying which nodes the app will be ran on. Any
  valid value for the [`--constraint` flag](https://docs.docker.com/engine/swarm/services/#placement-constraints)
  is valid item in this list.
  """
  placement: [String!]
  "Volume bindings for the app."
  volumes: [BoundVolume!]
  """
  A list of other apps that the service communicates with using their service
  name and docker's internal DNS. Services don't have to be two way; only the
  service that accesses the other needs the other network added.
  """
  networks: [String!]
  "Custom docker command. This is an array of arguments starting with the binary that is being executed"
  command: [String!]
}

"Input type for [BoundVolume](#boundvolume)."
input BoundVolumeInput {
  target: String!
  source: String!
}

"Input type for [App](#app)."
input AppInput {
  name: String!
  image: String!
  autoUpgrade: Boolean
  group: String
  hidden: Boolean
  targetPorts: [Int!]
  publishedPorts: [Int!]
  placement: [String!]
  volumes: [BoundVolumeInput!]
  networks: [String!]
  command: [String!]
}

"[Changeset](#Changeset) input type for [App](#app)."
input AppChanges {
  name: String
  image: String
  group: String
  hidden: Boolean
  targetPorts: [Int!]
  publishedPorts: [Int!]
  placement: [String!]
  volumes: [BoundVolumeInput!]
  networks: [String!]
  command: [String!]
}

"Plugins are apps with deeper integrations with Miasma."
type Plugin {
  name: PluginName!
  "Whether or not the plugin has been enabled."
  enabled: Boolean!
  "Plugin's configuration."
  config: Map!
}

"Rules around where an app can be accessed from."
type Route {
  appId: ID!
  createdAt: Time!
  updatedAt: Time!
  "The URL's hostname, ex: 'example.com' or 'google.com'."
  host: String
  "A custom path at the end of the URL: ex: '/search' or '/console'"
  path: String
  """
  A custom Traefik rule instead of just a host and path, ex: '(Host(domain1.com) || Host(domain2.com)'

  See [Traefik's docs](https://doc.traefik.io/traefik/routing/routers/#rule) for usage and complex examples.
  """
  traefikRule: String
}

"Input type for [Route](#route)."
input RouteInput {
  host: String
  path: String
  traefikRule: String
}

"Contains information about how many instances of the app are running vs supposed to be running"
type AppInstances {
  running: Int!
  total: Int!
}

"Unique identifier for plugins"
enum PluginName {
  "The name of the [Traefik](https://doc.traefik.io/traefik/) ingress router plugin"
  TRAEFIK
}

"Details about a machine in the cluster."
type Node {
  "The docker node's ID."
  id: String!
  "The OS the node is running"
  os: String!
  "The CPU architecture of the node. Services are automatically placed on nodes based on their image's supported architectures and the nodes' architectures."
  architecture: String!
  "The machines hostname, as returned by the `hostname` command."
  hostname: String!
  "The IP address the node joined the cluster as."
  ip: String!

  "`unknown`, `down`, `ready`, or `disconnected`. See Docker's [API docs](https://docs.docker.com/engine/api/v1.41/#operation/NodeInspect)."
  status: String!
  "The node's status message, usually present when when the status is not `ready`."
  statusMessage: String
  "The node's labels, mostly used to place apps on specific nodes."
  labels: Map!
  "List of apps running on the machine"
  services(
    "Same as `listApps`'s argument. When `true`, hidden apps will be returned"
    showHidden: Boolean = false
  ): [App!]!
}

"Tasks define the desired state of on app. If you're familiar with docker, this returns the result of `docker service ps`"
type AppTask {
  message: String!
  state: String!
  desiredState: String!
  timestamp: Time!
  appId: String!
  app: App!
  nodeId: String!
  node: Node!
  name: String!
  error: String
  exitCode: Int
}
