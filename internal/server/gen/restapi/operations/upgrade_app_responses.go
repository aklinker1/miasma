// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// UpgradeAppNoContentCode is the HTTP code returned for type UpgradeAppNoContent
const UpgradeAppNoContentCode int = 204

/*UpgradeAppNoContent Upgrade success

swagger:response upgradeAppNoContent
*/
type UpgradeAppNoContent struct {
}

// NewUpgradeAppNoContent creates UpgradeAppNoContent with default headers values
func NewUpgradeAppNoContent() *UpgradeAppNoContent {

	return &UpgradeAppNoContent{}
}

// WriteResponse to the client
func (o *UpgradeAppNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// UpgradeAppBadRequestCode is the HTTP code returned for type UpgradeAppBadRequest
const UpgradeAppBadRequestCode int = 400

/*UpgradeAppBadRequest Bad Request

swagger:response upgradeAppBadRequest
*/
type UpgradeAppBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUpgradeAppBadRequest creates UpgradeAppBadRequest with default headers values
func NewUpgradeAppBadRequest() *UpgradeAppBadRequest {

	return &UpgradeAppBadRequest{}
}

// WithPayload adds the payload to the upgrade app bad request response
func (o *UpgradeAppBadRequest) WithPayload(payload string) *UpgradeAppBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upgrade app bad request response
func (o *UpgradeAppBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpgradeAppBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// UpgradeAppNotFoundCode is the HTTP code returned for type UpgradeAppNotFound
const UpgradeAppNotFoundCode int = 404

/*UpgradeAppNotFound Not Found

swagger:response upgradeAppNotFound
*/
type UpgradeAppNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUpgradeAppNotFound creates UpgradeAppNotFound with default headers values
func NewUpgradeAppNotFound() *UpgradeAppNotFound {

	return &UpgradeAppNotFound{}
}

// WithPayload adds the payload to the upgrade app not found response
func (o *UpgradeAppNotFound) WithPayload(payload string) *UpgradeAppNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upgrade app not found response
func (o *UpgradeAppNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpgradeAppNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*UpgradeAppDefault Unknown Error

swagger:response upgradeAppDefault
*/
type UpgradeAppDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUpgradeAppDefault creates UpgradeAppDefault with default headers values
func NewUpgradeAppDefault(code int) *UpgradeAppDefault {
	if code <= 0 {
		code = 500
	}

	return &UpgradeAppDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the upgrade app default response
func (o *UpgradeAppDefault) WithStatusCode(code int) *UpgradeAppDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the upgrade app default response
func (o *UpgradeAppDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the upgrade app default response
func (o *UpgradeAppDefault) WithPayload(payload string) *UpgradeAppDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upgrade app default response
func (o *UpgradeAppDefault) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpgradeAppDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
