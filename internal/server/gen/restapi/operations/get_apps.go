// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAppsHandlerFunc turns a function with the right signature into a get apps handler
type GetAppsHandlerFunc func(GetAppsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAppsHandlerFunc) Handle(params GetAppsParams) middleware.Responder {
	return fn(params)
}

// GetAppsHandler interface for that can handle valid get apps params
type GetAppsHandler interface {
	Handle(GetAppsParams) middleware.Responder
}

// NewGetApps creates a new http.Handler for the get apps operation
func NewGetApps(ctx *middleware.Context, handler GetAppsHandler) *GetApps {
	return &GetApps{Context: ctx, Handler: handler}
}

/*GetApps swagger:route GET /api/apps getApps

List all the running applications

*/
type GetApps struct {
	Context *middleware.Context
	Handler GetAppsHandler
}

func (o *GetApps) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAppsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
