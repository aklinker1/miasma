// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// StopAppOKCode is the HTTP code returned for type StopAppOK
const StopAppOKCode int = 200

/*StopAppOK Stopped

swagger:response stopAppOK
*/
type StopAppOK struct {
}

// NewStopAppOK creates StopAppOK with default headers values
func NewStopAppOK() *StopAppOK {

	return &StopAppOK{}
}

// WriteResponse to the client
func (o *StopAppOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// StopAppNotFoundCode is the HTTP code returned for type StopAppNotFound
const StopAppNotFoundCode int = 404

/*StopAppNotFound Not Found

swagger:response stopAppNotFound
*/
type StopAppNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewStopAppNotFound creates StopAppNotFound with default headers values
func NewStopAppNotFound() *StopAppNotFound {

	return &StopAppNotFound{}
}

// WithPayload adds the payload to the stop app not found response
func (o *StopAppNotFound) WithPayload(payload string) *StopAppNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop app not found response
func (o *StopAppNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopAppNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*StopAppDefault Unknown Error

swagger:response stopAppDefault
*/
type StopAppDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewStopAppDefault creates StopAppDefault with default headers values
func NewStopAppDefault(code int) *StopAppDefault {
	if code <= 0 {
		code = 500
	}

	return &StopAppDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the stop app default response
func (o *StopAppDefault) WithStatusCode(code int) *StopAppDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the stop app default response
func (o *StopAppDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the stop app default response
func (o *StopAppDefault) WithPayload(payload string) *StopAppDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop app default response
func (o *StopAppDefault) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopAppDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
