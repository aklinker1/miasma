// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// InstallPluginHandlerFunc turns a function with the right signature into a install plugin handler
type InstallPluginHandlerFunc func(InstallPluginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn InstallPluginHandlerFunc) Handle(params InstallPluginParams) middleware.Responder {
	return fn(params)
}

// InstallPluginHandler interface for that can handle valid install plugin params
type InstallPluginHandler interface {
	Handle(InstallPluginParams) middleware.Responder
}

// NewInstallPlugin creates a new http.Handler for the install plugin operation
func NewInstallPlugin(ctx *middleware.Context, handler InstallPluginHandler) *InstallPlugin {
	return &InstallPlugin{Context: ctx, Handler: handler}
}

/*InstallPlugin swagger:route POST /api/plugins/{pluginName} installPlugin

Install (and start) a plugin

*/
type InstallPlugin struct {
	Context *middleware.Context
	Handler InstallPluginHandler
}

func (o *InstallPlugin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewInstallPluginParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
