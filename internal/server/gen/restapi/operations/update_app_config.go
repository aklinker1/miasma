// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateAppConfigHandlerFunc turns a function with the right signature into a update app config handler
type UpdateAppConfigHandlerFunc func(UpdateAppConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateAppConfigHandlerFunc) Handle(params UpdateAppConfigParams) middleware.Responder {
	return fn(params)
}

// UpdateAppConfigHandler interface for that can handle valid update app config params
type UpdateAppConfigHandler interface {
	Handle(UpdateAppConfigParams) middleware.Responder
}

// NewUpdateAppConfig creates a new http.Handler for the update app config operation
func NewUpdateAppConfig(ctx *middleware.Context, handler UpdateAppConfigHandler) *UpdateAppConfig {
	return &UpdateAppConfig{Context: ctx, Handler: handler}
}

/*UpdateAppConfig swagger:route PUT /api/apps/{appName}/config updateAppConfig

update an app's config

*/
type UpdateAppConfig struct {
	Context *middleware.Context
	Handler UpdateAppConfigHandler
}

func (o *UpdateAppConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateAppConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
