// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/aklinker1/miasma/package/models"
)

// GetAppTraefikConfigOKCode is the HTTP code returned for type GetAppTraefikConfigOK
const GetAppTraefikConfigOKCode int = 200

/*GetAppTraefikConfigOK Created

swagger:response getAppTraefikConfigOK
*/
type GetAppTraefikConfigOK struct {

	/*
	  In: Body
	*/
	Payload *models.TraefikPluginConfig `json:"body,omitempty"`
}

// NewGetAppTraefikConfigOK creates GetAppTraefikConfigOK with default headers values
func NewGetAppTraefikConfigOK() *GetAppTraefikConfigOK {

	return &GetAppTraefikConfigOK{}
}

// WithPayload adds the payload to the get app traefik config o k response
func (o *GetAppTraefikConfigOK) WithPayload(payload *models.TraefikPluginConfig) *GetAppTraefikConfigOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get app traefik config o k response
func (o *GetAppTraefikConfigOK) SetPayload(payload *models.TraefikPluginConfig) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAppTraefikConfigOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAppTraefikConfigNotFoundCode is the HTTP code returned for type GetAppTraefikConfigNotFound
const GetAppTraefikConfigNotFoundCode int = 404

/*GetAppTraefikConfigNotFound Not Found

swagger:response getAppTraefikConfigNotFound
*/
type GetAppTraefikConfigNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetAppTraefikConfigNotFound creates GetAppTraefikConfigNotFound with default headers values
func NewGetAppTraefikConfigNotFound() *GetAppTraefikConfigNotFound {

	return &GetAppTraefikConfigNotFound{}
}

// WithPayload adds the payload to the get app traefik config not found response
func (o *GetAppTraefikConfigNotFound) WithPayload(payload string) *GetAppTraefikConfigNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get app traefik config not found response
func (o *GetAppTraefikConfigNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAppTraefikConfigNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*GetAppTraefikConfigDefault Unknown Error

swagger:response getAppTraefikConfigDefault
*/
type GetAppTraefikConfigDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetAppTraefikConfigDefault creates GetAppTraefikConfigDefault with default headers values
func NewGetAppTraefikConfigDefault(code int) *GetAppTraefikConfigDefault {
	if code <= 0 {
		code = 500
	}

	return &GetAppTraefikConfigDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get app traefik config default response
func (o *GetAppTraefikConfigDefault) WithStatusCode(code int) *GetAppTraefikConfigDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get app traefik config default response
func (o *GetAppTraefikConfigDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get app traefik config default response
func (o *GetAppTraefikConfigDefault) WithPayload(payload string) *GetAppTraefikConfigDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get app traefik config default response
func (o *GetAppTraefikConfigDefault) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAppTraefikConfigDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
