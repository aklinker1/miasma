// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// StartAppHandlerFunc turns a function with the right signature into a start app handler
type StartAppHandlerFunc func(StartAppParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StartAppHandlerFunc) Handle(params StartAppParams) middleware.Responder {
	return fn(params)
}

// StartAppHandler interface for that can handle valid start app params
type StartAppHandler interface {
	Handle(StartAppParams) middleware.Responder
}

// NewStartApp creates a new http.Handler for the start app operation
func NewStartApp(ctx *middleware.Context, handler StartAppHandler) *StartApp {
	return &StartApp{Context: ctx, Handler: handler}
}

/*StartApp swagger:route POST /api/apps/{appName}/start startApp

start the application

*/
type StartApp struct {
	Context *middleware.Context
	Handler StartAppHandler
}

func (o *StartApp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStartAppParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
