// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAppsHandlerFunc turns a function with the right signature into a list apps handler
type ListAppsHandlerFunc func(ListAppsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAppsHandlerFunc) Handle(params ListAppsParams) middleware.Responder {
	return fn(params)
}

// ListAppsHandler interface for that can handle valid list apps params
type ListAppsHandler interface {
	Handle(ListAppsParams) middleware.Responder
}

// NewListApps creates a new http.Handler for the list apps operation
func NewListApps(ctx *middleware.Context, handler ListAppsHandler) *ListApps {
	return &ListApps{Context: ctx, Handler: handler}
}

/*ListApps swagger:route GET /api/apps listApps

List all the running apps

*/
type ListApps struct {
	Context *middleware.Context
	Handler ListAppsHandler
}

func (o *ListApps) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAppsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
