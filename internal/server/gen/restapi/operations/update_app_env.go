// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateAppEnvHandlerFunc turns a function with the right signature into a update app env handler
type UpdateAppEnvHandlerFunc func(UpdateAppEnvParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateAppEnvHandlerFunc) Handle(params UpdateAppEnvParams) middleware.Responder {
	return fn(params)
}

// UpdateAppEnvHandler interface for that can handle valid update app env params
type UpdateAppEnvHandler interface {
	Handle(UpdateAppEnvParams) middleware.Responder
}

// NewUpdateAppEnv creates a new http.Handler for the update app env operation
func NewUpdateAppEnv(ctx *middleware.Context, handler UpdateAppEnvHandler) *UpdateAppEnv {
	return &UpdateAppEnv{Context: ctx, Handler: handler}
}

/*UpdateAppEnv swagger:route PUT /api/apps/{appName}/env updateAppEnv

update an app's env

*/
type UpdateAppEnv struct {
	Context *middleware.Context
	Handler UpdateAppEnvHandler
}

func (o *UpdateAppEnv) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateAppEnvParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
