// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppConfig app config
//
// swagger:model AppConfig
type AppConfig struct {

	// The ports that the application is listening to inside the container. If this list is empty, then the container should respect the `PORT` env var. Miasma manages the published ports for each port listed here.
	// Required: true
	// Unique: true
	TargetPorts []int64 `json:"targetPorts"`
}

// Validate validates this app config
func (m *AppConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppConfig) validateTargetPorts(formats strfmt.Registry) error {

	if err := validate.Required("targetPorts", "body", m.TargetPorts); err != nil {
		return err
	}

	if err := validate.UniqueItems("targetPorts", "body", m.TargetPorts); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppConfig) UnmarshalBinary(b []byte) error {
	var res AppConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
