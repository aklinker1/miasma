// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/aklinker1/miasma/package/models"
)

// GetAppTraefikConfigReader is a Reader for the GetAppTraefikConfig structure.
type GetAppTraefikConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAppTraefikConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAppTraefikConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetAppTraefikConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetAppTraefikConfigDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAppTraefikConfigOK creates a GetAppTraefikConfigOK with default headers values
func NewGetAppTraefikConfigOK() *GetAppTraefikConfigOK {
	return &GetAppTraefikConfigOK{}
}

/*GetAppTraefikConfigOK handles this case with default header values.

Created
*/
type GetAppTraefikConfigOK struct {
	Payload *models.TraefikPluginConfig
}

func (o *GetAppTraefikConfigOK) Error() string {
	return fmt.Sprintf("[GET /api/plugins/traefik/{appName}][%d] getAppTraefikConfigOK  %+v", 200, o.Payload)
}

func (o *GetAppTraefikConfigOK) GetPayload() *models.TraefikPluginConfig {
	return o.Payload
}

func (o *GetAppTraefikConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TraefikPluginConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppTraefikConfigNotFound creates a GetAppTraefikConfigNotFound with default headers values
func NewGetAppTraefikConfigNotFound() *GetAppTraefikConfigNotFound {
	return &GetAppTraefikConfigNotFound{}
}

/*GetAppTraefikConfigNotFound handles this case with default header values.

Not Found
*/
type GetAppTraefikConfigNotFound struct {
	Payload string
}

func (o *GetAppTraefikConfigNotFound) Error() string {
	return fmt.Sprintf("[GET /api/plugins/traefik/{appName}][%d] getAppTraefikConfigNotFound  %+v", 404, o.Payload)
}

func (o *GetAppTraefikConfigNotFound) GetPayload() string {
	return o.Payload
}

func (o *GetAppTraefikConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppTraefikConfigDefault creates a GetAppTraefikConfigDefault with default headers values
func NewGetAppTraefikConfigDefault(code int) *GetAppTraefikConfigDefault {
	return &GetAppTraefikConfigDefault{
		_statusCode: code,
	}
}

/*GetAppTraefikConfigDefault handles this case with default header values.

Unknown Error
*/
type GetAppTraefikConfigDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the get app traefik config default response
func (o *GetAppTraefikConfigDefault) Code() int {
	return o._statusCode
}

func (o *GetAppTraefikConfigDefault) Error() string {
	return fmt.Sprintf("[GET /api/plugins/traefik/{appName}][%d] getAppTraefikConfig default  %+v", o._statusCode, o.Payload)
}

func (o *GetAppTraefikConfigDefault) GetPayload() string {
	return o.Payload
}

func (o *GetAppTraefikConfigDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
