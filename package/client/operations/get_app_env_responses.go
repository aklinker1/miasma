// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetAppEnvReader is a Reader for the GetAppEnv structure.
type GetAppEnvReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAppEnvReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAppEnvOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetAppEnvNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetAppEnvDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAppEnvOK creates a GetAppEnvOK with default headers values
func NewGetAppEnvOK() *GetAppEnvOK {
	return &GetAppEnvOK{}
}

/*GetAppEnvOK handles this case with default header values.

OK
*/
type GetAppEnvOK struct {
	Payload interface{}
}

func (o *GetAppEnvOK) Error() string {
	return fmt.Sprintf("[GET /api/apps/{appName}/env][%d] getAppEnvOK  %+v", 200, o.Payload)
}

func (o *GetAppEnvOK) GetPayload() interface{} {
	return o.Payload
}

func (o *GetAppEnvOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppEnvNotFound creates a GetAppEnvNotFound with default headers values
func NewGetAppEnvNotFound() *GetAppEnvNotFound {
	return &GetAppEnvNotFound{}
}

/*GetAppEnvNotFound handles this case with default header values.

Not Found
*/
type GetAppEnvNotFound struct {
	Payload string
}

func (o *GetAppEnvNotFound) Error() string {
	return fmt.Sprintf("[GET /api/apps/{appName}/env][%d] getAppEnvNotFound  %+v", 404, o.Payload)
}

func (o *GetAppEnvNotFound) GetPayload() string {
	return o.Payload
}

func (o *GetAppEnvNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppEnvDefault creates a GetAppEnvDefault with default headers values
func NewGetAppEnvDefault(code int) *GetAppEnvDefault {
	return &GetAppEnvDefault{
		_statusCode: code,
	}
}

/*GetAppEnvDefault handles this case with default header values.

Unknown Error
*/
type GetAppEnvDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the get app env default response
func (o *GetAppEnvDefault) Code() int {
	return o._statusCode
}

func (o *GetAppEnvDefault) Error() string {
	return fmt.Sprintf("[GET /api/apps/{appName}/env][%d] getAppEnv default  %+v", o._statusCode, o.Payload)
}

func (o *GetAppEnvDefault) GetPayload() string {
	return o.Payload
}

func (o *GetAppEnvDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
