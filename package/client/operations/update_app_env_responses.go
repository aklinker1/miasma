// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateAppEnvReader is a Reader for the UpdateAppEnv structure.
type UpdateAppEnvReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAppEnvReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAppEnvOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAppEnvBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAppEnvNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateAppEnvDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateAppEnvOK creates a UpdateAppEnvOK with default headers values
func NewUpdateAppEnvOK() *UpdateAppEnvOK {
	return &UpdateAppEnvOK{}
}

/*UpdateAppEnvOK handles this case with default header values.

OK
*/
type UpdateAppEnvOK struct {
	Payload interface{}
}

func (o *UpdateAppEnvOK) Error() string {
	return fmt.Sprintf("[PUT /api/apps/{appName}/env][%d] updateAppEnvOK  %+v", 200, o.Payload)
}

func (o *UpdateAppEnvOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateAppEnvOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppEnvBadRequest creates a UpdateAppEnvBadRequest with default headers values
func NewUpdateAppEnvBadRequest() *UpdateAppEnvBadRequest {
	return &UpdateAppEnvBadRequest{}
}

/*UpdateAppEnvBadRequest handles this case with default header values.

Bad Request
*/
type UpdateAppEnvBadRequest struct {
	Payload string
}

func (o *UpdateAppEnvBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/apps/{appName}/env][%d] updateAppEnvBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAppEnvBadRequest) GetPayload() string {
	return o.Payload
}

func (o *UpdateAppEnvBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppEnvNotFound creates a UpdateAppEnvNotFound with default headers values
func NewUpdateAppEnvNotFound() *UpdateAppEnvNotFound {
	return &UpdateAppEnvNotFound{}
}

/*UpdateAppEnvNotFound handles this case with default header values.

Not Found
*/
type UpdateAppEnvNotFound struct {
	Payload string
}

func (o *UpdateAppEnvNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/apps/{appName}/env][%d] updateAppEnvNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAppEnvNotFound) GetPayload() string {
	return o.Payload
}

func (o *UpdateAppEnvNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppEnvDefault creates a UpdateAppEnvDefault with default headers values
func NewUpdateAppEnvDefault(code int) *UpdateAppEnvDefault {
	return &UpdateAppEnvDefault{
		_statusCode: code,
	}
}

/*UpdateAppEnvDefault handles this case with default header values.

Unknown Error
*/
type UpdateAppEnvDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the update app env default response
func (o *UpdateAppEnvDefault) Code() int {
	return o._statusCode
}

func (o *UpdateAppEnvDefault) Error() string {
	return fmt.Sprintf("[PUT /api/apps/{appName}/env][%d] updateAppEnv default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateAppEnvDefault) GetPayload() string {
	return o.Payload
}

func (o *UpdateAppEnvDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
