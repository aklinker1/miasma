// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpgradeAppParams creates a new UpgradeAppParams object
// with the default values initialized.
func NewUpgradeAppParams() *UpgradeAppParams {
	var ()
	return &UpgradeAppParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpgradeAppParamsWithTimeout creates a new UpgradeAppParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpgradeAppParamsWithTimeout(timeout time.Duration) *UpgradeAppParams {
	var ()
	return &UpgradeAppParams{

		timeout: timeout,
	}
}

// NewUpgradeAppParamsWithContext creates a new UpgradeAppParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpgradeAppParamsWithContext(ctx context.Context) *UpgradeAppParams {
	var ()
	return &UpgradeAppParams{

		Context: ctx,
	}
}

// NewUpgradeAppParamsWithHTTPClient creates a new UpgradeAppParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpgradeAppParamsWithHTTPClient(client *http.Client) *UpgradeAppParams {
	var ()
	return &UpgradeAppParams{
		HTTPClient: client,
	}
}

/*UpgradeAppParams contains all the parameters to send to the API endpoint
for the upgrade app operation typically these are written to a http.Request
*/
type UpgradeAppParams struct {

	/*AppName
	  App name from the `-a|--app` flag

	*/
	AppName string
	/*NewImage
	  A new image to base the app off of

	*/
	NewImage *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upgrade app params
func (o *UpgradeAppParams) WithTimeout(timeout time.Duration) *UpgradeAppParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upgrade app params
func (o *UpgradeAppParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upgrade app params
func (o *UpgradeAppParams) WithContext(ctx context.Context) *UpgradeAppParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upgrade app params
func (o *UpgradeAppParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upgrade app params
func (o *UpgradeAppParams) WithHTTPClient(client *http.Client) *UpgradeAppParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upgrade app params
func (o *UpgradeAppParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppName adds the appName to the upgrade app params
func (o *UpgradeAppParams) WithAppName(appName string) *UpgradeAppParams {
	o.SetAppName(appName)
	return o
}

// SetAppName adds the appName to the upgrade app params
func (o *UpgradeAppParams) SetAppName(appName string) {
	o.AppName = appName
}

// WithNewImage adds the newImage to the upgrade app params
func (o *UpgradeAppParams) WithNewImage(newImage *string) *UpgradeAppParams {
	o.SetNewImage(newImage)
	return o
}

// SetNewImage adds the newImage to the upgrade app params
func (o *UpgradeAppParams) SetNewImage(newImage *string) {
	o.NewImage = newImage
}

// WriteToRequest writes these params to a swagger request
func (o *UpgradeAppParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param appName
	if err := r.SetPathParam("appName", o.AppName); err != nil {
		return err
	}

	if o.NewImage != nil {

		// query param newImage
		var qrNewImage string
		if o.NewImage != nil {
			qrNewImage = *o.NewImage
		}
		qNewImage := qrNewImage
		if qNewImage != "" {
			if err := r.SetQueryParam("newImage", qNewImage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
