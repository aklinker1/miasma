// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/aklinker1/miasma/package/models"
)

// NewUpdateRunConfigParams creates a new UpdateRunConfigParams object
// with the default values initialized.
func NewUpdateRunConfigParams() *UpdateRunConfigParams {
	var ()
	return &UpdateRunConfigParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateRunConfigParamsWithTimeout creates a new UpdateRunConfigParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateRunConfigParamsWithTimeout(timeout time.Duration) *UpdateRunConfigParams {
	var ()
	return &UpdateRunConfigParams{

		timeout: timeout,
	}
}

// NewUpdateRunConfigParamsWithContext creates a new UpdateRunConfigParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateRunConfigParamsWithContext(ctx context.Context) *UpdateRunConfigParams {
	var ()
	return &UpdateRunConfigParams{

		Context: ctx,
	}
}

// NewUpdateRunConfigParamsWithHTTPClient creates a new UpdateRunConfigParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateRunConfigParamsWithHTTPClient(client *http.Client) *UpdateRunConfigParams {
	var ()
	return &UpdateRunConfigParams{
		HTTPClient: client,
	}
}

/*UpdateRunConfigParams contains all the parameters to send to the API endpoint
for the update run config operation typically these are written to a http.Request
*/
type UpdateRunConfigParams struct {

	/*AppName
	  App name from the `-a|--app` flag

	*/
	AppName string
	/*NewRunConfig*/
	NewRunConfig *models.RunConfig

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update run config params
func (o *UpdateRunConfigParams) WithTimeout(timeout time.Duration) *UpdateRunConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update run config params
func (o *UpdateRunConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update run config params
func (o *UpdateRunConfigParams) WithContext(ctx context.Context) *UpdateRunConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update run config params
func (o *UpdateRunConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update run config params
func (o *UpdateRunConfigParams) WithHTTPClient(client *http.Client) *UpdateRunConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update run config params
func (o *UpdateRunConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppName adds the appName to the update run config params
func (o *UpdateRunConfigParams) WithAppName(appName string) *UpdateRunConfigParams {
	o.SetAppName(appName)
	return o
}

// SetAppName adds the appName to the update run config params
func (o *UpdateRunConfigParams) SetAppName(appName string) {
	o.AppName = appName
}

// WithNewRunConfig adds the newRunConfig to the update run config params
func (o *UpdateRunConfigParams) WithNewRunConfig(newRunConfig *models.RunConfig) *UpdateRunConfigParams {
	o.SetNewRunConfig(newRunConfig)
	return o
}

// SetNewRunConfig adds the newRunConfig to the update run config params
func (o *UpdateRunConfigParams) SetNewRunConfig(newRunConfig *models.RunConfig) {
	o.NewRunConfig = newRunConfig
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateRunConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param appName
	if err := r.SetPathParam("appName", o.AppName); err != nil {
		return err
	}

	if o.NewRunConfig != nil {
		if err := r.SetBodyParam(o.NewRunConfig); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
