// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpgradeAppReader is a Reader for the UpgradeApp structure.
type UpgradeAppReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpgradeAppReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpgradeAppOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpgradeAppBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpgradeAppNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpgradeAppDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpgradeAppOK creates a UpgradeAppOK with default headers values
func NewUpgradeAppOK() *UpgradeAppOK {
	return &UpgradeAppOK{}
}

/*UpgradeAppOK handles this case with default header values.

OK
*/
type UpgradeAppOK struct {
	Payload interface{}
}

func (o *UpgradeAppOK) Error() string {
	return fmt.Sprintf("[PUT /api/apps/{appName}/upgrade][%d] upgradeAppOK  %+v", 200, o.Payload)
}

func (o *UpgradeAppOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpgradeAppOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpgradeAppBadRequest creates a UpgradeAppBadRequest with default headers values
func NewUpgradeAppBadRequest() *UpgradeAppBadRequest {
	return &UpgradeAppBadRequest{}
}

/*UpgradeAppBadRequest handles this case with default header values.

Bad Request
*/
type UpgradeAppBadRequest struct {
	Payload string
}

func (o *UpgradeAppBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/apps/{appName}/upgrade][%d] upgradeAppBadRequest  %+v", 400, o.Payload)
}

func (o *UpgradeAppBadRequest) GetPayload() string {
	return o.Payload
}

func (o *UpgradeAppBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpgradeAppNotFound creates a UpgradeAppNotFound with default headers values
func NewUpgradeAppNotFound() *UpgradeAppNotFound {
	return &UpgradeAppNotFound{}
}

/*UpgradeAppNotFound handles this case with default header values.

Not Found
*/
type UpgradeAppNotFound struct {
	Payload string
}

func (o *UpgradeAppNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/apps/{appName}/upgrade][%d] upgradeAppNotFound  %+v", 404, o.Payload)
}

func (o *UpgradeAppNotFound) GetPayload() string {
	return o.Payload
}

func (o *UpgradeAppNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpgradeAppDefault creates a UpgradeAppDefault with default headers values
func NewUpgradeAppDefault(code int) *UpgradeAppDefault {
	return &UpgradeAppDefault{
		_statusCode: code,
	}
}

/*UpgradeAppDefault handles this case with default header values.

Unknown Error
*/
type UpgradeAppDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the upgrade app default response
func (o *UpgradeAppDefault) Code() int {
	return o._statusCode
}

func (o *UpgradeAppDefault) Error() string {
	return fmt.Sprintf("[PUT /api/apps/{appName}/upgrade][%d] upgradeApp default  %+v", o._statusCode, o.Payload)
}

func (o *UpgradeAppDefault) GetPayload() string {
	return o.Payload
}

func (o *UpgradeAppDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
