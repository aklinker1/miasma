// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateApp(params *CreateAppParams) (*CreateAppCreated, error)

	DeleteApp(params *DeleteAppParams) (*DeleteAppOK, error)

	EditApp(params *EditAppParams) (*EditAppOK, error)

	GetApp(params *GetAppParams) (*GetAppOK, error)

	GetAppEnv(params *GetAppEnvParams) (*GetAppEnvOK, error)

	GetAppTraefikConfig(params *GetAppTraefikConfigParams) (*GetAppTraefikConfigOK, error)

	GetPlugin(params *GetPluginParams) (*GetPluginOK, error)

	GetRunConfig(params *GetRunConfigParams) (*GetRunConfigOK, error)

	HealthCheck(params *HealthCheckParams) (*HealthCheckOK, error)

	InstallPlugin(params *InstallPluginParams) (*InstallPluginCreated, error)

	ListApps(params *ListAppsParams) (*ListAppsOK, error)

	ListPlugins(params *ListPluginsParams) (*ListPluginsOK, error)

	RemoveAppTraefikConfig(params *RemoveAppTraefikConfigParams) (*RemoveAppTraefikConfigOK, error)

	StartApp(params *StartAppParams) (*StartAppNoContent, error)

	StopApp(params *StopAppParams) (*StopAppNoContent, error)

	UninstallPlugin(params *UninstallPluginParams) (*UninstallPluginOK, error)

	UpdateAppEnv(params *UpdateAppEnvParams) (*UpdateAppEnvOK, error)

	UpdateAppTraefikConfig(params *UpdateAppTraefikConfigParams) (*UpdateAppTraefikConfigOK, error)

	UpdateRunConfig(params *UpdateRunConfigParams) (*UpdateRunConfigOK, error)

	UpgradeApp(params *UpgradeAppParams) (*UpgradeAppNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateApp creates and start a new app
*/
func (a *Client) CreateApp(params *CreateAppParams) (*CreateAppCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createApp",
		Method:             "POST",
		PathPattern:        "/api/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAppCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteApp stops and delete an app
*/
func (a *Client) DeleteApp(params *DeleteAppParams) (*DeleteAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApp",
		Method:             "DELETE",
		PathPattern:        "/api/apps/{appName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  EditApp edits the app details
*/
func (a *Client) EditApp(params *EditAppParams) (*EditAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "editApp",
		Method:             "PUT",
		PathPattern:        "/api/apps/{appName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EditAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetApp gets an app by name
*/
func (a *Client) GetApp(params *GetAppParams) (*GetAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApp",
		Method:             "GET",
		PathPattern:        "/api/apps/{appName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAppEnv gets an app s environment variables
*/
func (a *Client) GetAppEnv(params *GetAppEnvParams) (*GetAppEnvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppEnvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppEnv",
		Method:             "GET",
		PathPattern:        "/api/apps/{appName}/env",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppEnvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppEnvOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAppEnvDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAppTraefikConfig gets an app s routing config
*/
func (a *Client) GetAppTraefikConfig(params *GetAppTraefikConfigParams) (*GetAppTraefikConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppTraefikConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppTraefikConfig",
		Method:             "GET",
		PathPattern:        "/api/plugins/traefik/{appId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppTraefikConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppTraefikConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAppTraefikConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPlugin gets a plugin
*/
func (a *Client) GetPlugin(params *GetPluginParams) (*GetPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlugin",
		Method:             "GET",
		PathPattern:        "/api/plugins/{pluginName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPluginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRunConfig gets an app s current config
*/
func (a *Client) GetRunConfig(params *GetRunConfigParams) (*GetRunConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunConfig",
		Method:             "GET",
		PathPattern:        "/api/apps/{appName}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRunConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HealthCheck standards health check endpoint that checks all the service s statuses
*/
func (a *Client) HealthCheck(params *HealthCheckParams) (*HealthCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "healthCheck",
		Method:             "GET",
		PathPattern:        "/api/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HealthCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HealthCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for healthCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InstallPlugin installs and start a plugin
*/
func (a *Client) InstallPlugin(params *InstallPluginParams) (*InstallPluginCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallPluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "installPlugin",
		Method:             "POST",
		PathPattern:        "/api/plugins/{pluginName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InstallPluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstallPluginCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InstallPluginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListApps lists all the running apps
*/
func (a *Client) ListApps(params *ListAppsParams) (*ListAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAppsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listApps",
		Method:             "GET",
		PathPattern:        "/api/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAppsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAppsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListAppsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListPlugins lists all available plugins and if they are installed
*/
func (a *Client) ListPlugins(params *ListPluginsParams) (*ListPluginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPluginsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listPlugins",
		Method:             "GET",
		PathPattern:        "/api/plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPluginsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPluginsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListPluginsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RemoveAppTraefikConfig removes an app s routing config
*/
func (a *Client) RemoveAppTraefikConfig(params *RemoveAppTraefikConfigParams) (*RemoveAppTraefikConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAppTraefikConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeAppTraefikConfig",
		Method:             "DELETE",
		PathPattern:        "/api/plugins/traefik/{appId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveAppTraefikConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveAppTraefikConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveAppTraefikConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StartApp starts the app
*/
func (a *Client) StartApp(params *StartAppParams) (*StartAppNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startApp",
		Method:             "POST",
		PathPattern:        "/api/apps/{appName}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartAppNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StopApp stops the app
*/
func (a *Client) StopApp(params *StopAppParams) (*StopAppNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopApp",
		Method:             "POST",
		PathPattern:        "/api/apps/{appName}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopAppNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StopAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UninstallPlugin stops and uninstall a plugin
*/
func (a *Client) UninstallPlugin(params *UninstallPluginParams) (*UninstallPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUninstallPluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uninstallPlugin",
		Method:             "DELETE",
		PathPattern:        "/api/plugins/{pluginName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UninstallPluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UninstallPluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UninstallPluginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateAppEnv updates an app s env
*/
func (a *Client) UpdateAppEnv(params *UpdateAppEnvParams) (*UpdateAppEnvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAppEnvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAppEnv",
		Method:             "PUT",
		PathPattern:        "/api/apps/{appName}/env",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAppEnvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAppEnvOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAppEnvDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateAppTraefikConfig updates an app s routing config
*/
func (a *Client) UpdateAppTraefikConfig(params *UpdateAppTraefikConfigParams) (*UpdateAppTraefikConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAppTraefikConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAppTraefikConfig",
		Method:             "PUT",
		PathPattern:        "/api/plugins/traefik/{appId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAppTraefikConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAppTraefikConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAppTraefikConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateRunConfig updates an app s config
*/
func (a *Client) UpdateRunConfig(params *UpdateRunConfigParams) (*UpdateRunConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRunConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRunConfig",
		Method:             "PUT",
		PathPattern:        "/api/apps/{appName}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRunConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRunConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateRunConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpgradeApp pulls the app s image and restart it
*/
func (a *Client) UpgradeApp(params *UpgradeAppParams) (*UpgradeAppNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgradeApp",
		Method:             "PUT",
		PathPattern:        "/api/apps/{appName}/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpgradeAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeAppNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpgradeAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
