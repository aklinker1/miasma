// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/aklinker1/miasma/package/models"
)

// GetRunConfigReader is a Reader for the GetRunConfig structure.
type GetRunConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRunConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRunConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetRunConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetRunConfigDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetRunConfigOK creates a GetRunConfigOK with default headers values
func NewGetRunConfigOK() *GetRunConfigOK {
	return &GetRunConfigOK{}
}

/*GetRunConfigOK handles this case with default header values.

OK
*/
type GetRunConfigOK struct {
	Payload *models.RunConfig
}

func (o *GetRunConfigOK) Error() string {
	return fmt.Sprintf("[GET /api/apps/{appName}/config][%d] getRunConfigOK  %+v", 200, o.Payload)
}

func (o *GetRunConfigOK) GetPayload() *models.RunConfig {
	return o.Payload
}

func (o *GetRunConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RunConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunConfigNotFound creates a GetRunConfigNotFound with default headers values
func NewGetRunConfigNotFound() *GetRunConfigNotFound {
	return &GetRunConfigNotFound{}
}

/*GetRunConfigNotFound handles this case with default header values.

Not Found
*/
type GetRunConfigNotFound struct {
	Payload string
}

func (o *GetRunConfigNotFound) Error() string {
	return fmt.Sprintf("[GET /api/apps/{appName}/config][%d] getRunConfigNotFound  %+v", 404, o.Payload)
}

func (o *GetRunConfigNotFound) GetPayload() string {
	return o.Payload
}

func (o *GetRunConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunConfigDefault creates a GetRunConfigDefault with default headers values
func NewGetRunConfigDefault(code int) *GetRunConfigDefault {
	return &GetRunConfigDefault{
		_statusCode: code,
	}
}

/*GetRunConfigDefault handles this case with default header values.

Unknown Error
*/
type GetRunConfigDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the get run config default response
func (o *GetRunConfigDefault) Code() int {
	return o._statusCode
}

func (o *GetRunConfigDefault) Error() string {
	return fmt.Sprintf("[GET /api/apps/{appName}/config][%d] getRunConfig default  %+v", o._statusCode, o.Payload)
}

func (o *GetRunConfigDefault) GetPayload() string {
	return o.Payload
}

func (o *GetRunConfigDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
