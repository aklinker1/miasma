// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/aklinker1/miasma/package/models"
)

// NewUpdateAppConfigParams creates a new UpdateAppConfigParams object
// with the default values initialized.
func NewUpdateAppConfigParams() *UpdateAppConfigParams {
	var ()
	return &UpdateAppConfigParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAppConfigParamsWithTimeout creates a new UpdateAppConfigParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateAppConfigParamsWithTimeout(timeout time.Duration) *UpdateAppConfigParams {
	var ()
	return &UpdateAppConfigParams{

		timeout: timeout,
	}
}

// NewUpdateAppConfigParamsWithContext creates a new UpdateAppConfigParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateAppConfigParamsWithContext(ctx context.Context) *UpdateAppConfigParams {
	var ()
	return &UpdateAppConfigParams{

		Context: ctx,
	}
}

// NewUpdateAppConfigParamsWithHTTPClient creates a new UpdateAppConfigParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateAppConfigParamsWithHTTPClient(client *http.Client) *UpdateAppConfigParams {
	var ()
	return &UpdateAppConfigParams{
		HTTPClient: client,
	}
}

/*UpdateAppConfigParams contains all the parameters to send to the API endpoint
for the update app config operation typically these are written to a http.Request
*/
type UpdateAppConfigParams struct {

	/*AppName
	  App name from the `-a|--app` flag

	*/
	AppName string
	/*NewAppConfig*/
	NewAppConfig *models.AppConfig

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update app config params
func (o *UpdateAppConfigParams) WithTimeout(timeout time.Duration) *UpdateAppConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update app config params
func (o *UpdateAppConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update app config params
func (o *UpdateAppConfigParams) WithContext(ctx context.Context) *UpdateAppConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update app config params
func (o *UpdateAppConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update app config params
func (o *UpdateAppConfigParams) WithHTTPClient(client *http.Client) *UpdateAppConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update app config params
func (o *UpdateAppConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppName adds the appName to the update app config params
func (o *UpdateAppConfigParams) WithAppName(appName string) *UpdateAppConfigParams {
	o.SetAppName(appName)
	return o
}

// SetAppName adds the appName to the update app config params
func (o *UpdateAppConfigParams) SetAppName(appName string) {
	o.AppName = appName
}

// WithNewAppConfig adds the newAppConfig to the update app config params
func (o *UpdateAppConfigParams) WithNewAppConfig(newAppConfig *models.AppConfig) *UpdateAppConfigParams {
	o.SetNewAppConfig(newAppConfig)
	return o
}

// SetNewAppConfig adds the newAppConfig to the update app config params
func (o *UpdateAppConfigParams) SetNewAppConfig(newAppConfig *models.AppConfig) {
	o.NewAppConfig = newAppConfig
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAppConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param appName
	if err := r.SetPathParam("appName", o.AppName); err != nil {
		return err
	}

	if o.NewAppConfig != nil {
		if err := r.SetBodyParam(o.NewAppConfig); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
