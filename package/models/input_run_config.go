// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InputRunConfig All the properties that define how the application runs in docker
//
// swagger:model InputRunConfig
type InputRunConfig struct {

	// command
	Command []string `json:"command"`

	// networks
	// Unique: true
	Networks []string `json:"networks"`

	// placement
	// Unique: true
	Placement []string `json:"placement"`

	// published ports
	// Unique: true
	PublishedPorts []uint32 `json:"publishedPorts"`

	// target ports
	// Unique: true
	TargetPorts []uint32 `json:"targetPorts"`

	// volume bindings for the app
	Volumes []*RunConfigVolume `json:"volumes"`
}

// Validate validates this input run config
func (m *InputRunConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlacement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InputRunConfig) validateNetworks(formats strfmt.Registry) error {

	if swag.IsZero(m.Networks) { // not required
		return nil
	}

	if err := validate.UniqueItems("networks", "body", m.Networks); err != nil {
		return err
	}

	return nil
}

func (m *InputRunConfig) validatePlacement(formats strfmt.Registry) error {

	if swag.IsZero(m.Placement) { // not required
		return nil
	}

	if err := validate.UniqueItems("placement", "body", m.Placement); err != nil {
		return err
	}

	return nil
}

func (m *InputRunConfig) validatePublishedPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.PublishedPorts) { // not required
		return nil
	}

	if err := validate.UniqueItems("publishedPorts", "body", m.PublishedPorts); err != nil {
		return err
	}

	return nil
}

func (m *InputRunConfig) validateTargetPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetPorts) { // not required
		return nil
	}

	if err := validate.UniqueItems("targetPorts", "body", m.TargetPorts); err != nil {
		return err
	}

	return nil
}

func (m *InputRunConfig) validateVolumes(formats strfmt.Registry) error {

	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	for i := 0; i < len(m.Volumes); i++ {
		if swag.IsZero(m.Volumes[i]) { // not required
			continue
		}

		if m.Volumes[i] != nil {
			if err := m.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InputRunConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InputRunConfig) UnmarshalBinary(b []byte) error {
	var res InputRunConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
