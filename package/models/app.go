// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// App app
//
// swagger:model App
type App struct {

	// A simple label to track what apps are related
	Group string `json:"group,omitempty" gorm:"index"`

	// Whether or not the app is returned during regular requests
	Hidden bool `json:"hidden,omitempty" gorm:"index"`

	// id
	// Required: true
	// Format: uuid4
	ID strfmt.UUID4 `json:"id" gorm:"primaryKey"`

	// The image and tag the application runs
	Image string `json:"image,omitempty"`

	// The apps name, used in the CLI with the `-a|--app` flag
	// Required: true
	Name string `json:"name" gorm:"uniqueIndex"`
}

// Validate validates this app
func (m *App) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *App) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", strfmt.UUID4(m.ID)); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid4", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *App) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *App) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *App) UnmarshalBinary(b []byte) error {
	var res App
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
