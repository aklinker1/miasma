// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Health health
//
// swagger:model Health
type Health struct {

	// The version of docker running on the host, or null if docker is not running
	// Required: true
	DockerVersion *string `json:"dockerVersion"`

	// swarm
	// Required: true
	Swarm *HealthSwarm `json:"swarm"`

	// Miasma's current version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this health
func (m *Health) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDockerVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwarm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Health) validateDockerVersion(formats strfmt.Registry) error {

	if err := validate.Required("dockerVersion", "body", m.DockerVersion); err != nil {
		return err
	}

	return nil
}

func (m *Health) validateSwarm(formats strfmt.Registry) error {

	if err := validate.Required("swarm", "body", m.Swarm); err != nil {
		return err
	}

	if m.Swarm != nil {
		if err := m.Swarm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("swarm")
			}
			return err
		}
	}

	return nil
}

func (m *Health) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Health) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Health) UnmarshalBinary(b []byte) error {
	var res Health
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HealthSwarm The info about the docker swarm if the host running miasma is apart of one. If it is not apart of a swarm, it returns `null`
//
// swagger:model HealthSwarm
type HealthSwarm struct {

	// UTC timestamps when the swarm was created
	CreatedAt string `json:"createdAt,omitempty"`

	// The swarm's ID
	ID string `json:"id,omitempty"`

	// The command for a node to run to join the swarm
	JoinCommand string `json:"joinCommand,omitempty"`

	// UTC timestamps when the swarm was last updated
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// Validate validates this health swarm
func (m *HealthSwarm) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HealthSwarm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthSwarm) UnmarshalBinary(b []byte) error {
	var res HealthSwarm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
